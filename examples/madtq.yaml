# Small Workflow that runs madness and uses the result for a small VQE calculation with tequila
# Last step exports the hamiltonian as OpenFermion interaction operator (this is the fermionic hamiltonian)
# this last step can then be used in the same way as other orquestra example workflows
# See the other workflow on how this is used within a orquestra VQE framework

# Workflow API version
apiVersion: io.orquestra.workflow/1.0.0

# Prefix for workflow ID
name: madex

imports:
- name: z-quantum-core
  type: git
  parameters:
    repository: "git@github.com:zapatacomputing/z-quantum-core.git"
    branch: "master"
- name: qe-madtequila
  type: git
  parameters:
    repository: "git@github.com:kottmanj/qe-madtequila.git"
    branch: "jsk"

steps:
- name: run-madness
  config:
    runtime:
      language: python3
      customImage: "kottmanj/madness-tequila"
      imports: [qe-madtequila, z-quantum-core]
      parameters:
        file: qe-madtequila/steps/run_madtequila.py
        function: run_madness
  inputs:
    - geometry: "Li 0.0 0.0 0.0\nH 0.0 0.0 1.6"
      type: string
    - n_pno: 1
      type: int
  outputs:
    - name: madmolecule
      type: madmolecule
- name: compute-pno-upccd
  passed: [run-madness]
  config:
    runtime:
      language: python3
      customImage: "kottmanj/madness-tequila"
      imports: [qe-madtequila, z-quantum-core]
      parameters:
        file: qe-madtequila/steps/run_madtequila.py
        function: compute_pno_upccd
  inputs:
     - madmolecule: ((run-madness.madmolecule))
       type: madmolecule
  outputs:
     - name: final_energy
       type: float
- name: convert-to-of
  passed: [run-madness]
  config:
    runtime:
      language: python3
      customImage: "kottmanj/madness-tequila"
      imports: [qe-madtequila, z-quantum-core]
      parameters:
        file: qe-madtequila/steps/run_madtequila.py
        function: make_interaction_operator
  inputs:
      - madmolecule: ((run-madness.madmolecule))
        type: madmolecule
  outputs:
      - name: hamiltonian
        type: hamiltonian
- name: create-qubit-hamiltonian
  passed: [run-madness]
  config:
          runtime:
                  language: python3
                  customImage: "kottmanj/madness-tequila"
                  imports: [qe-madtequila]
                  parameters:
                    file: qe-madtequila/steps/run_madtequila.py
                    function: make_qubit_hamiltonian
  inputs:
          - madmolecule: ((run-madness.madmolecule))
            type: madmolecule
          - transformation: "symmetry_conserving_bravyi_kitaev"
            type: string
  outputs:
          - name: qubit_hamiltonian
            type: qubit_hamiltonian 
- name: optimize-measurements
  passed: [create-qubit-hamiltonian]
  config:
          runtime:
                  language: python3
                  customImage: "kottmanj/madness-tequila"
                  imports: [qe-madtequila]
                  parameters:
                    file: qe-madtequila/steps/run_madtequila.py
                    function: optimize_measurements
  inputs:
          - qubit_hamiltonian: ((create-qubit-hamiltonian.qubit_hamiltonian))
            type: qubit_hamiltonian
  outputs:
          - name: measurement_groups
            type: measurement_groups

- name: compute-pyscf-energy
  passed: [run-madness]
  config:
          runtime:
                  language: python3
                  customImage: "kottmanj/madness-tequila"
                  imports: [qe-madtequila]
                  parameters:
                    file: qe-madtequila/steps/run_madtequila.py
                    function: compute_pyscf_energy
  inputs:
          - madmolecule: ((run-madness.madmolecule))
            type: madmolecule
          - method: "all" # supporting HF, CCSD, CISD, CCSD(T), FCI; "all" gives a dictionary with MP2, CCSD, CCSD(T), FCI
            type: string
  outputs:
          - name: energy
            type: float




types:
  - madmolecule
  - hamiltonian
  - qubit_hamiltonian
  - measurement_groups
